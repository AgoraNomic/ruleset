id: 2162
name: Switches
power: 2
text: |
  A type of switch is a property that the rules define as a switch,
  and specify the following:

  1. The type(s) of entity possessing an instance of that switch. No
     other entity possesses an instance of that switch.

  2. One or more possible values for instances of that switch,
     exactly one of which is designated as the default. No other
     values are possible for instances of that switch.

  3. Optionally, exactly one office whose holder tracks instances of
     that switch. That officer's (weekly, if not specified
     otherwise) report includes the value of each instance of that
     switch whose value is not its default value; a public document
     purporting to be this portion of that officer's report is
     self-ratifying, and implies that other instances are at their
     default value.

  At any given time, each instance of a switch has exactly one
  possible value for that type of switch. If an instance of a switch
  comes to have a value, it ceases to have any other value. If an
  instance of a switch would otherwise fail to have a possible
  value, it comes to have its default value.

  "To flip an instance of a switch" is to make it come to have a
  given value. "To become X" (where X is a possible value of
  exactly one of the subject's switches) is to flip that switch to
  X.

  If an action or set of actions would cause the value of an
  instance of a switch to become indeterminate, the instance instead
  takes on its last determinate and possible value, if any,
  otherwise it takes on its default value.

  A singleton switch is a switch for which Agora Nomic is the only
  entity possessing an instance of that switch.

  A boolean switch is a switch with values True and False. A
  positive boolean switch has a default of True; a negative boolean
  switch has a default of False.

  Attempting to flip an instance of a switch to a value it already
  has does not flip the switch. However, if a person is REQUIRED to
  flip a switch instance to a value it already has, then either
  attempting to do so using the required mechanism, or announcing
  that the switch already has the required value, fulfills the
  requirement without flipping the switch.
history:
- change:
    type: enactment
  date: 2007-08-02
  agent:
    proposal: "5111"
- change:
    type: amendment
  date: 2007-11-07
  agent:
    proposal: "5271"
- change:
    type: amendment
  date: 2012-06-10
  agent:
    proposal: "7247"
- change:
    type: amendment
  date: 2012-09-09
  agent:
    proposal: "7289"
- change:
    type: amendment
  date: 2013-05-27
  agent:
    proposal: "7425"
- change:
    type: amendment
  date: 2014-06-03
  agent:
    proposal: "7649"
- change:
    type: amendment
  date: 2015-05-02
  agent:
    proposal: "7735"
- change:
    type: amendment
  date: 2016-11-07
  agent:
    proposal: "7828"
- change:
    type: amendment
  date: 2017-05-24
  agent:
    rule: 2430
- change:
    type: amendment
  date: 2017-10-03
  agent:
    proposal: "7902"
- change:
    type: amendment
  date: 2017-10-03
  agent:
    proposal: "7903"
annotations: []
